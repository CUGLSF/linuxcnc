////////////////////////////////////////////////
Note: use asciidoc -a latexmath
////////////////////////////////////////////////

[[cha:5-axis-kinematics]] (((5-Axis Kinematics)))

= 5-Axis Kinematics

== Introduction

Coordinated multi-axis CNC machine tools controlled with LinuxCNC, require a special kinematics component for each type of machine. This document describes some of the most popular 5-axis machine configurations and then develops the forward (from work to joint coordinates) and inverse (from joint to work) transformations in a general mathematical process for two types of machine.

The kinematics components are given as well as vismach simulation models to demonstrate their behaviour on a computer screen. Examples of HAL file data are also given.

== 5-Axis Machine Tool Configurations

In this section we deal with the typical 5-axis milling or router machines with five joints or degrees-of-freedom which are controlled in coordinated moves.

3-axis machine tools cannot change the tool orientation, so  5-axis machine tools use two extra axes to set the cutting tool in an appropriate orientation for efficient machining of freeform surfaces.

Typical 5-axis machine tool configurations are shown in Figs. 3, 5, 7 and 9-11 [1,2] in section Figures.

The kinematics of 5-axes machine tools are much simpler than that of 6-axis serial arm robots, since 3 of the axes are normally linear axes and only two are rotational axes.

== Tool Orientation and Location

CAD/CAM systems are typically used to generate the 3D CAD models of the workpiece as well as the CAM data for input to the CNC 5-axis machine. The tool or cutter location (CL) data, is composed of the cutter tip position and the cutter orientation relative to the workpiece coordinate system. Two vectors, as generated by most CAM systems and shown in Fig. 1, contain this information:

[latex]
\begin{equation*}
\mbox{
$
K = \left[\begin{array}{c}
 K_x \\
 K_y \\
 K_z \\
 0
\end{array}\right] \quad \mbox{orientation vector;} \qquad
Q = \left[\begin{array}{c}
 Q_x \\
 Q_y \\
 Q_z \\
 1
\end{array}\right] \quad \mbox{position vector}
\qquad \mbox{(1)}
$ 
}
\end{equation*}

The $K$ vector is equivalent to the 3rd vector from the pose matrix $E_6$ that was used in the 6-axis robot kinematics [3] and the $Q$ vector is equivalent to the 4th vector of $E_6$. In MASTERCAM for example this information is contained in the intermediate output ".nci" file.

.Cutter location data
image::5-axis-figures/Figure-1.png[align="center",height=400]

== Translation and Rotation Matrices
Homogenous transformations provide a simple way to describe the mathematics of
multi-axis machine kinematics. A transformation of the space $H$ is a 4x4 matrix and can represent translation and rotation transformations. Given a point x,y,x described by a vector $u = [x,y,z,1]^T$, then its transformation $v$ is represented by the matrix product
[latex]
\begin{equation*}
v = H \cdot u
\end{equation*}
There are four fundamental transformation matrices on which 5-axis kinematics can be based:

[latex]
\begin{equation*}
\mbox{
$
T(a,b,c) =
\left[ \begin{array}{cccc}
                 1  &    0   &  0   &  a \\
                 0  &    1   &  0   &  b  \\
                 0  &    0   &  1   &  c  \\
                 0  &    0   &  0   &  1
\end{array} \right] \quad
R(X,\theta) =
\left[ \begin{array}{cccc}
                 1  &   0        &  0        &  0  \\
                 0  &   C\theta  &  -S\theta &  0 \\
                 0  &   S\theta  &  C\theta  &  0 \\
                 0  &   0        &  0        &  1
\end{array} \right]
\qquad \mbox{(2)}
$
}
\end{equation*}
\begin{equation*}
\mbox{
$
R(Y,\theta) =
\left[ \begin{array}{cccc}
                 C\theta  &   0  &  S\theta  &  0  \\
                 0        &   1  &  0        &  0 \\
                 -S\theta &   0  &  C\theta  &  0 \\
                 0  &   0        &  0        &  1
\end{array} \right] \quad
R(Z,\theta) =
\left[ \begin{array}{cccc}
                 C\theta  & -S\theta  &  0  &  0  \\
                 S\theta  &  C\theta  &  0  &  0 \\
                 0        &   0       &  1  &  0 \\
                 0        &   0       &  0  &  1
\end{array} \right]
\qquad \mbox{(3)}
$
}
\end{equation*}

The matrix $T(a,b,c)$ implies a translation in the $X, Y, Z$ coordinate directions by the amounts $a, b, c$ respectively. The $R$ matrices imply rotations of the angle $\theta$ about the $X, Y $ and $Z$ coordinate axes respectively. The 'C' and 'S' symbols refer to cosine and sine functions respectively.

== Table Rotary/Tilting 5-Axis Configurations

In these machine tools the two rotational axes mount on the work table of the machine. Two forms are typically used:

* A rotary table which rotates about the vertical Z-axes (C-rotation, secondary) mounted on a tilting table which rotates about the X- or Y-axis (A- or B-rotation, primary). The workpiece is mounted on the rotary table.
* A tilting table which rotates about the X- or Y-axis (A- or B-rotation, secondary) is mounted on a rotary table which rotates about the Z-axis (C-rotation, primary), with the workpiece on the tilting table.

.General configuration and coordinate systems
image::5-axis-figures/Figure-2.png[align= "center"]

A multi-axis machine can be considered to consist of a series of links connected by joints. By embedding a coordinate frame in each link of the machine and using homogeneous transformations, we can describe the relative position and orientation between these coordinate frames

We need to describe a relationship between the workpiece coordinate system and the tool coordinate system. This can be defined by a transformation matrix '^w^A~t~', which can be found by subsequent transformations between the different structural elements or links of the machine, each with its own defined coordinate system. In general such a transformation may look as follows:

[latex]
\begin{equation*}
^wA_t = ^wA_1 \cdot ^1A_2 \cdot ^2A_3 \cdots ^nA_t
\qquad \mbox{(4)}
\end{equation*}

where each matrix '^i-1^A~j~' is a translation matrix 'T' or a rotation matrix 'R' of the form (2,3).

Matrix multiplication is a simple process in which the elements of each row of the lefthand matrix $A$ is multiplied by the elements of each column of the righthand matrix $B$ and summed to obtain an element in the result matrix $C$, ie.
[latex]
\begin{equation*}
C_{ij} = \sum^n_{k=1,n} A_{ik} B_{kj}; \quad i=1,n; \quad j=1,n
\end{equation*}


In Fig. 2 a generic configuration with coordinate systems is shown [4]. It includes table rotary/tilting axes as well as spindle rotary/tilting axes. Only two of the rotary axes are actually used in a machine tool.

First we will develop the transformations for the first type of configuration mentioned above, ie. a table tilting/rotary (trt) type with no rotating axis offsets. We may give it the name xyzac-trt configuration.

We also develop the transformations for the same type (xyzac-trt), but with rotating axis offsets.

Then we develop the transformations for a xyzbc-trt configuration with rotating axis offsets.

=== Transformations for a xyzac-trt machine tool with work offsets ===

.vismach model of xyzac-trt with coincident rotation axes
image::5-axis-figures/Figure-3.png[align= "center"]

We deal here with a simplified configuration in which the tilting axis and rotary axis intersects at a point called the pivot point as shown in Fig. 4. therefore the two coordinate systems 'O~ws~' and 'O~wp~' of Fig. 2 are coincident.

.Table tilting/rotary configuration
image::5-axis-figures/Figure-4.png[align="center",height=400]

==== Forward transformation ====

The transformation can be defined by the sequential multiplication of the matrices:

[latex]
\begin{equation*}
^wA_t = ^wA_C \cdot ^CA_A \cdot ^AA_P \cdot ^PA_t
\qquad \mbox{(5)}
\end{equation*}

with the matrices built up as follows:
[latex]
\begin{equation*}
\mbox{
$
^wA_C =
\left[ \begin{array}{cccc}
                 1  &    0   &  0   &  L_x \\
                 0  &    1   &  0   &  L_y  \\
                 0  &    0   &  1   &  L_z  \\
                 0  &    0   &  0   &  1
\end{array} \right] \quad
^CA_A =
\left[ \begin{array}{cccc}
                 C_C   &  S_C   &  0 &  0  \\
                 -S_C  &  C_C   &  0 &  0 \\
                 0     &   0    &  1 &  0 \\
                 0     &   0    &  0 &  1
\end{array} \right]
\qquad \mbox{(6)}
$
}
\end{equation*}
\begin{equation*}
\mbox{
$
^AA_P =
\left[ \begin{array}{cccc}
                 1  &   0    &  0   &  0  \\
                 0  &   C_A  &  S_A &  0 \\
                 0  &   -S_A &  C_A &  0 \\
                 0  &   0    &  0   &  1
\end{array} \right] \quad
^PA_t =
\left[ \begin{array}{cccc}
                 1  &  0  &  0  &  P_x  \\
                 0  &  1  &  0  &  P_y \\
                 0  &  0  &  1  &  P_z\\
                 0  &  0  &  0  &  1
\end{array} \right]
\qquad \mbox{(7)}
$
}
\end{equation*}

In these equations $L_x, L_y, L_z$ defines the offsets of the pivot point of the two rotary axes $A$ and $C$ relative to the workpiece coordinate system origin. Furthermore, $P_x, P_y, P_z$ are the relative  distances of the pivot point to the cutter tip position, which can also be called the "joint coordinates" of the pivot point. The pivot point is at the intersection of the two rotary axes. The signs of the $S_A$ and $S_C$ terms are different to those in [2,3] since there the table rotations are negative relative to the workpiece coordinate axes (note that $sin(-\theta) = -sin(\theta), cos(-\theta) = cos(\theta)$).

When multiplied in accordance with (5), we obtain:
[latex]
\begin{equation*}
\mbox{
$
^wA_t =
\left[ \begin{array}{cccc}
  C_C  &  S_CC_A   &  S_CS_A  &  C_CP_x + S_CC_AP_y + S_CS_AP_z + L_x \\
 -S_C  &  C_CC_A   &  C_CS_A  & -S_CP_x + C_CC_AP_y + C_CS_AP_z + L_y \\
    0  &   -S_A    &  C_A   &  -S_AP_y + C_AP_z + L_z  \\
                 0  &    0   &  0   &  1
\end{array} \right] \quad
\qquad \mbox{(8)}
$
}
\end{equation*}

We can now equate the third column of this matrix with our given tool orientation vector $K$, ie.:
[latex]
\begin{equation*}
\mbox{
$
K = \left[\begin{array}{c}
 K_x \\
 K_y \\
 K_z \\
 0
\end{array}\right]
 = \left[\begin{array}{c}
 S_CS_A \\
 C_CS_A \\
 C_A \\
 0
\end{array}\right]
\qquad \mbox{(9)}
$
}
\end{equation*}

From these equations we can solve for the rotation angles $\theta_A, \theta_C$. From the third row we find:
[latex]
\begin{equation*}
\theta_A = cos^{-1}(K_z) \qquad (0 < \theta_A < \pi)
\qquad \mbox{(10)}
\end{equation*}

and by dividing the first row by the second row we find:
[latex]
\begin{equation*}
\theta_C = tan2^{-1}(K_x, K_y) \qquad (-\pi < \theta_C < \pi)
\qquad \mbox{(11)}
\end{equation*}

These relationships are typically used in the CAM post-processor to convert the tool orientation vectors to rotation angles.

Equating the last column of (8) with the tool position vector $Q$, we can write:
[latex]
\begin{equation*}
\mbox{
$
Q = \left[\begin{array}{c}
 Q_x \\
 Q_y \\
 Q_z \\
 1
\end{array}\right] =
\left[ \begin{array}{c}
   C_CP_x + S_CC_AP_y + S_CS_AP_z + L_x \\
  -S_CP_x + C_CC_AP_y + C_CS_AP_z + L_y \\
  -S_AP_y + C_AP_z + L_z  \\
       1
\end{array} \right]
\qquad \mbox{(12)}
$
}
\end{equation*}

The vector on the right hand side can also be written as the product of a matrix and a vector resulting in:
[latex]
\begin{equation*}
\mbox{
$
Q = \left[\begin{array}{c}
 Q_x \\
 Q_y \\
 Q_z \\
 1
\end{array}\right] =
\left[ \begin{array}{cccc}
   C_C &  S_CC_A & S_CS_A  & L_x \\
  -S_C &  C_CC_A & C_CS_A  & L_y \\
   0   & -S_A &  C_A    &  L_z  \\
    0  &   0     &      &   1
\end{array} \right]
\left[\begin{array}{c}
 P_x \\
 P_y \\
 P_z \\
 1
 \end{array}\right]
 = ^QA_P \cdot P
\qquad \mbox{(13)}
$
}
\end{equation*}

This can be expanded to give
[latex]
\begin{equation*}
\mbox{
$
\begin{array}{cl}
 Q_x & = C_cP_x + S_CC_AP_y + S_CS_AP_z + L_x\\
 Q_y & = -S_CP_x  + C_CC_AP_y  + C_CS_AP_z + L_y\\
 Q_z & = -S_AP_y  + C_AP_z + L_z
\end{array}
\qquad \mbox{(14)}
$
}
\end{equation*}

which is the 'forward transformation' of the kinematics.


==== Inverse Transformation

We can solve for $P$ from  equation (13) as 'P = (^Q^A~P~)^-1^$\cdot$ Q'. Noting that the square matrix is a homogenous 4x4 matrix containing a rotation matrix $R$ and translation vector $q$, for which the inverse can be written as:

[latex]
\begin{equation*}
\mbox{
$
^qA_p =  \left[\begin{array}{cc}
 R  & q \\
 0  & 1
\end{array}\right] \qquad
(^QA_P)^{-1} = \left[\begin{array}{cc}
 R^T & - R^T q\\
 0   &  1
 \end{array}\right]
\qquad \mbox{(15)}
$
}
\end{equation*}

where $R^T$ is the transpose of $R$ (rows and columns swappped). We therefore obtain:

[latex]
\begin{equation*}
\mbox{
$
 \left[\begin{array}{c}
 P_x \\
 P_y \\
 P_z \\
 1
\end{array}\right] =
\left[ \begin{array}{cccc}
   C_C    &  -S_C   & 0     & -C_CL_x + S_CL_y\\
   S_CC_A &  C_CC_A & -S_A  & -S_CC_AL_x - C_CC_AL_y + S_AL_z\\
   S_CS_A &  C_CS_A &  C_A  & -S_CS_AL_x - C_CS_AL_y - C_AL_z   \\
    0     &   0     &       &   1
\end{array} \right]
\left[\begin{array}{c}
 Q_x \\
 Q_y \\
 Q_z \\
 1
 \end{array}\right]
\qquad \mbox{(16)}
$
}
\end{equation*}

The desired equations for the 'inverse transformation' of the kinematics thus can be written as:
[latex]
\begin{equation*}
\mbox{
$
\begin{array}{cl}
 P_x  & = C_c(Q_x - L_x) - S_C(Q_y - L_y)\\
 P_y  & = S_CC_A(Q_x - L_x) + C_CC_A(Q_y - L_y) - S_A(Q_z - L_z) \\
 P_z  & = S_CS_A(Q_x - L_x) + C_CS_A(Q_y - L_y) + C_A(Q_z - L_z)
\end{array}
\qquad \mbox{(17)}
$
}
\end{equation*}

=== Transformations for a xyzac-trt machine  with rotary axis offsets

.vismach model of xyzac-trt with rotational axis offsets (positive)
image::5-axis-figures/Figure-5.png[align= "center"]

We deal here with a extended configuration in which the tilting axis and rotary axis do not intersect at a point but have an offset $D_y$. Furthermore, there is also an z-offset between the two coordinate systems 'O~ws~' and 'O~wp~' of Fig. 2, called $D_z$. A vismach model is shown in Fig. 5 and the offsets are shown in Fig. 6 (positive offsets in this example). To simplify the configuration, the offsets $L_x, L_y, L_z$ of the previous case
 are not included. They are probably not necessary if one uses the G54 offsets in LinuxCNC by means of the "touch of" facility.

.Table tilting/rotary xyzac-trt configuration, with axis offsets
image::5-axis-figures/Figure-6.png[align= "center",height=350]


==== Forward Transformation

The transformation can be defined by the sequential multiplication of the matrices:

[latex]
\begin{equation*}
^wA_t =  ^wA_O \cdot ^OA_A \cdot ^AA_P \cdot ^PA_t
\qquad \mbox{(18)}
\end{equation*}

with the matrices built up as follows:

[latex]
\begin{equation*}
\mbox{
$
^wA_O =
\left[ \begin{array}{cccc}
                 C_C   &  S_C   &  0 &  0  \\
                 -S_C  &  C_C   &  0 &  0 \\
                 0     &   0    &  1 &  0 \\
                 0     &   0    &  0 &  1
\end{array} \right] \quad
^OA_A =
\left[ \begin{array}{cccc}
                 1  &    0   &  0   &  0 \\
                 0  &    1   &  0   &  D_y   \\
                 0  &    0   &  1   &  D_z  \\
                 0  &    0   &  0   &  1
\end{array} \right]
\qquad \mbox{(19)}
$
}
\end{equation*}
\begin{equation*}
\mbox{
$
^AA_P =
\left[ \begin{array}{cccc}
                 1  &   0    &  0   &  0  \\
                 0  &   C_A  &  S_A &  0 \\
                 0  &   -S_A &  C_A &  0 \\
                 0  &   0    &  0   &  1
\end{array} \right] \quad
^PA_t =
\left[ \begin{array}{cccc}
                 1  &  0  &  0  &  P_x   \\
                 0  &  1  &  0  &  P_y - D_y\\
                 0  &  0  &  1  &  P_z - D_z\\
                 0  &  0  &  0  &  1
\end{array} \right]
\qquad \mbox{(20)}
$
}
\end{equation*}

In these equations $D_y, D_z$ defines the offsets of the pivot point of the rotary axes $A$  relative to the workpiece coordinate system origin. Furthermore, $P_x, P_y, P_z$ are the relative  distances of the pivot point to the cutter tip position, which can also be called the "joint coordinates" of the pivot point. The pivot point is on the $A$ rotary axis.

When multiplied in accordance with (18), we obtain:
[latex]
\begin{equation*}
\mbox{
$
^wA_t =
\left[ \begin{array}{cccc}
  C_C  &  S_CC_A   &  S_CS_A    &  C_CP_x + S_CC_A(P_y - D_y) + S_CS_A(P_z - D_z) + S_CD_y \\
 -S_C  &  C_CC_A   &  C_CS_A    & -S_CP_x + C_CC_A(P_y - D_y) + C_CS_A(P_z - D_z) + C_CD_y \\
  0     &    -S_A   &  C_A      &  -S_A(P_y-D_y)  + C_A(P_z - D_z)  + D_z  \\
                 0  &    0   &  0   &  1
\end{array} \right] \quad
\qquad \mbox{(21)}
$
}
\end{equation*}

We can now equate the third column of this matrix with our given tool orientation vector $K$, ie.:
[latex]
\begin{equation*}
\mbox{
$
K = \left[\begin{array}{c}
 K_x \\
 K_y \\
 K_z \\
 0
\end{array}\right]
 = \left[\begin{array}{c}
 S_CS_A \\
 C_CS_A \\
 C_A \\
 0
\end{array}\right]
\qquad \mbox{(22)}
$
}
\end{equation*}

From these equations we can solve for the rotation angles $\theta_A, \theta_C$. From the third row we find:
[latex]
\begin{equation*}
\theta_A = cos^{-1}(K_z) \qquad (0 < \theta_A < \pi)
\qquad \mbox{(23)}
\end{equation*}

and by dividing the second row by the first row we find:
[latex]
\begin{equation*}
\theta_C = tan2^{-1}(K_x, K_y) \qquad (-\pi < \theta_C < \pi)
\qquad \mbox{(24)}
\end{equation*}

These relationships are typically used in the CAM post-processor to convert the tool orientation vectors to rotation angles.

Equating the last column of (21) with the tool position vector $Q$, we can write:
[latex]
\begin{equation*}
\mbox{
$
Q = \left[\begin{array}{c}
 Q_x \\
 Q_y \\
 Q_z \\
 1
\end{array}\right] =
\left[ \begin{array}{c}
   C_CP_x + S_CC_A(P_y - D_y) + S_CS_A(P_z - D_z) + S_CD_y \\
  -S_CP_x + C_CC_A(P_y - D_y) + C_CS_A(P_z - D_z) + C_CD_y \\
  -S_A(P_y-D_y)  + C_A(P_z - D_z)  + D_z  \\
                   1
\end{array} \right]
\qquad \mbox{(25)}
$
}
\end{equation*}

The vector on the right hand side can also be written as the product of a matrix and a vector resulting in:
[latex]
\begin{equation*}
\mbox{
$
Q = \left[\begin{array}{c}
 Q_x \\
 Q_y \\
 Q_z \\
 1
\end{array}\right] =
\left[ \begin{array}{cccc}
   C_C & S_CC_A & S_CS_A   & -S_cC_A D_y - S_CS_A D_z + S_C D_y \\
  -S_C & C_CC_A &  C_CS_A  & -C_CC_A D_y - C_CS_A D_z + C_C D_y \\
   0    &  -S_A  &  C_A    & S_A D_y - C_A D_z   + D_z  \\
   0   &   0   &   1 &  1
\end{array} \right]
\left[\begin{array}{c}
 P_x \\
 P_y \\
 P_z \\
 1
 \end{array}\right]
 = ^QA_P \cdot P
\qquad \mbox{(26)}
$
}
\end{equation*}

which is the 'forward transformation' of the kinematics.

==== Inverse Transformation

We can solve for $P$ from  equation (25) as 'P = (^Q^A~P~)^-1^$\cdot$ Q' using (15) as before.
We thereby obtain:
[latex]
\begin{equation*}
\mbox{
$
 \left[\begin{array}{c}
 P_x \\
 P_y \\
 P_z \\
 1
\end{array}\right] =
\left[ \begin{array}{cccc}
   C_C    &  -S_C   & 0     & 0 \\
S_CC_A &  C_CC_A & -S_A  &  -C_A D_y + S_A D_z + D_y\\
S_CS_A &  C_SS_A &  C_A  & -S_AD_y - C_AD_z + D_z   \\
    0     &   0     &       &   1
\end{array} \right]
\left[\begin{array}{c}
 Q_x \\
 Q_y \\
 Q_z \\
 1
 \end{array}\right]
\qquad \mbox{(27)}
$
}
\end{equation*}

The desired equations for the 'inverse transformation' of the kinematics thus can be written as:
[latex]
\begin{equation*}
\mbox{
$
\begin{array}{cl}
 P_x  & = C_cQ_x -  S_CQ_y \\
 P_y  & = S_CC_AQ_x  + C_CC_AQ_y  - S_AQ_z - C_AD_y  + S_A D_z + D_y\\
 P_z  & = S_CS_AQ_x  + C_SS_AQ_y  + C_A Q_z - S_A D_y - C_A D_z + D_z
\end{array}
\qquad \mbox{(28)}
$
}
\end{equation*}

=== Transformations for a xyzbc-trt machine  with rotary axis offsets

.vismach model of xyzbc-trt with rotational axis offsets (negative)
image::5-axis-figures/Figure-7.png[align= "center"]

We deal here again with a extended configuration in which the tilting axis (about the y-axis) and rotary axis do not intersect at a point but have an offset $D_x$. Furthermore, there is also an z-offset between the two coordinate systems 'O~ws~' and 'O~wp~' of Fig. 2, called $D_z$. A vismach model is shown in Fig. 7 (negative offsets in this example) and the positive offsets are shown in Fig. 8.

.Table tilting/rotary xyzbc-trt configuration, with axis offsets
image::5-axis-figures/Figure-8.png[align= "center",height=350]

==== Forward Transformation

The transformation can be defined by the sequential multiplication of the matrices:
[latex]
\begin{equation*}
^wA_t =  ^wA_O \cdot ^OA_B \cdot ^BA_P \cdot ^PA_t
\qquad \mbox{(29)}
\end{equation*}

with the matrices built up as follows:
[latex]
\begin{equation*}
\mbox{
$
^wA_O =
\left[ \begin{array}{cccc}
                 C_C   &  S_C   &  0 &  0  \\
                 -S_C  &  C_C   &  0 &  0 \\
                 0     &   0    &  1 &  0 \\
                 0     &   0    &  0 &  1
\end{array} \right] \quad
^OA_B =
\left[ \begin{array}{cccc}
                 1  &    0   &  0   &  D_x \\
                 0  &    1   &  0   &   0   \\
                 0  &    0   &  1   &  D_z  \\
                 0  &    0   &  0   &  1
\end{array} \right]
\qquad \mbox{(30)}
$
}
\end{equation*}
\begin{equation*}
\mbox{
$
^BA_P =
\left[ \begin{array}{cccc}
                 C_B  &   0    &  -S_B   &  0  \\
                 0  &   1  &  0 &  0 \\
                 S_B  &   0 &  C_B &  0 \\
                 0  &   0    &  0   &  1
\end{array} \right] \quad
^PA_t =
\left[ \begin{array}{cccc}
                 1  &  0  &  0  &  P_x - D_x  \\
                 0  &  1  &  0  &  P_y \\
                 0  &  0  &  1  &  P_z - D_z\\
                 0  &  0  &  0  &  1
\end{array} \right]
\qquad \mbox{(31)}
$
}
\end{equation*}

In these equations $D_x, D_z$ defines the offsets of the pivot point of the rotary axes $B$  relative to the workpiece coordinate system origin. Furthermore, $P_x, P_y, P_z$ are the relative  distances of the pivot point to the cutter tip position, which can also be called the "joint coordinates" of the pivot point. The pivot point is on the $B$ rotary axis.

When multiplied in accordance with (29), we obtain:
[latex]
\begin{equation*}
\mbox{
$
^wA_t =
\left[ \begin{array}{cccc}
  C_CC_B  &  S_C   &  -C_CS_B  &  C_CC_B(P_x-D_x) + S_CP_y - C_CS_B(P_z - D_z) + C_CD_x \\
 -S_CC_B  &  C_C   &  S_CS_B   & -S_CC_B(P_x-D_X) + C_CP_y + S_CS_B(P_z - D_z) - S_CD_x \\
  S_B     &    0   &  C_B      &  S_B(P_x-D_x)  + C_B(P_z - D_z)  + D_z  \\
                 0  &    0   &  0   &  1
\end{array} \right] \quad
\qquad \mbox{(32)}
$
}
\end{equation*}

We can now equate the third column of this matrix with our given tool orientation vector $K$, ie.:
[latex]
\begin{equation*}
\mbox{
$
K = \left[\begin{array}{c}
 K_x \\
 K_y \\
 K_z \\
 0
\end{array}\right]
 = \left[\begin{array}{c}
 -C_CS_B \\
 S_CS_B \\
 C_B \\
 0
\end{array}\right]
\qquad \mbox{(33)}
$
}
\end{equation*}

From these equations we can solve for the rotation angles $\theta_B, \theta_C$. From the third row we find:
[latex]
\begin{equation*}
\theta_B = cos^{-1}(K_z) \qquad (0 < \theta_B < \pi)
\qquad \mbox{(34)}
\end{equation*}

and by dividing the second row by the first row we find:
[latex]
\begin{equation*}
\theta_C = tan2^{-1}(K_y, K_x) \qquad (-\pi < \theta_C < \pi)
\qquad \mbox{(35)}
\end{equation*}

These relationships are typically used in the CAM post-processor to convert the tool orientation vectors to rotation angles.

Equating the last column of (32) with the tool position vector $Q$, we can write:
[latex]
\begin{equation*}
\mbox{
$
Q = \left[\begin{array}{c}
 Q_x \\
 Q_y \\
 Q_z \\
 1
\end{array}\right] =
\left[ \begin{array}{c}
   C_CC_B(P_x-D_x) + S_CP_y - C_CS_B(P_z - D_z) + C_CD_x \\
  -S_CC_B(P_x-D_X) + C_CP_y + S_CS_B(P_z - D_z) - S_CD_x \\
   S_B(P_x-D_x)  + C_B(P_z - D_z)  + D_z  \\
   1
\end{array} \right]
\qquad \mbox{(36)}
$
}
\end{equation*}

The vector on the right hand side can also be written as the product of a matrix and a vector resulting in:
[latex]
\begin{equation*}
\mbox{
$
Q = \left[\begin{array}{c}
 Q_x \\
 Q_y \\
 Q_z \\
 1
\end{array}\right] =
\left[ \begin{array}{cccc}
   C_CC_B & S_C & -C_CS_B & -C_cC_B D_x + C_CS_B D_z + C_C D_x \\
  -S_CC_B & C_C &  S_CS_B &  S_CC_B D_x - S_CS_B D_z - S_C D_x \\
   S_B    &  0  &  C_B    & -S_B D_x - C_B D_z   + D_z  \\
   0   &   0   &   1 &  1
\end{array} \right]
\left[\begin{array}{c}
 P_x \\
 P_y \\
 P_z \\
 1
 \end{array}\right]
 = ^QA_P \cdot P
\qquad \mbox{(37)}
$
}
\end{equation*}

which is the 'forward transformation' of the kinematics.

==== Inverse Transformation

We can solve for $P$ from  equation (37) as 'P = (^Q^A~P~)^-1^$\cdot$ Q'.  With the same approach as before, we obtain:
[latex]
\begin{equation*}
\mbox{
$
 \left[\begin{array}{c}
 P_x \\
 P_y \\
 P_z \\
 1
\end{array}\right] =
\left[ \begin{array}{cccc}
   C_CC_B    &  -S_CC_B   & S_B     & -C_BD_x - S_BD_z + D_x\\
   S_C &  C_C & 0  &  0\\
-C_CS_B &  S_CS_B &  C_B  & S_BD_x - C_BD_z + D_z   \\
    0     &   0     &       &   1
\end{array} \right]
\left[\begin{array}{c}
 Q_x \\
 Q_y \\
 Q_z \\
 1
 \end{array}\right]
\qquad \mbox{(38)}
$
}
\end{equation*}

The desired equations for the 'inverse transformation' of the kinematics thus can be written as:
[latex]
\begin{equation*}
\mbox{
$
\begin{array}{cl}
 P_x  & = C_cC_B Q_x  - S_CC_B Q_y + S_B Q_z - C_B D_x - S_B D_z + D_x\\
 P_y  & = S_C Q_x  + C_CQ_y   \\
 P_z  & = -C_CS_B Q_x  + S_CS_B Q_y + C_B Q_z  + S_B D_x - C_B D_z + D_z
\end{array}
\qquad \mbox{(39)}
$
}
\end{equation*}

== Table Rotary/Tilting Examples

LinuxCNC includes kinematics modules for the 'xyzac-trt' and 'xyzbc-trt' topologies
described in the mathematics detailed above.  For interested users, the source code
is available in the git tree in the 'src/emc/kinematics/' directory.

Example xyzac-trt and xyzbc-trt simulation configurations are located
in the Sample Configurations ('configs/sim/axis/vismach/5axis/table-rotary-tilting/')
directory.

The example configurations include the required ini files and an examples subdirectory
with gode (.ngc) files. These sim configurations invoke a realistic 3-dimensional model
using the LinuxCNC vismach facility.

=== Vismach Simulation Models

Vismach is a library of python routines to display a dynamic simulation of a CNC machine on the PC screen. The python script for a particular machine is loaded in HAL and data passed by HAL pin connections.  The user-space vismach model is loaded by a hal command like: 

----
loadusr -W xyzac-trt-gui
----

and connections are made using HAL commands like:
----
net  :table-x   joint.0.pos-fb xyzac-trt-gui.table-x
net  :saddle-y  joint.1.pos-fb xyzac-trt-gui.saddle-y
...
----

See the simulation ini files for details of the HAL connections used for the vismach model.

=== Tool-Length Compensation

In order to use tools from a tool table sequentially with tool-length compensation applied automatically, a further Z-offset is required. For a tool that is longer than the "master" tool, which typically has a tool length of zero, LinuxCNC has a variable called "motion.tooloffset.z". If this variable is passed on to the kinematic component (and vismach python script), then the necessary additional Z-offset for a new tool can be accounted for by adding the component statement, for example:
[latex]
\begin{math}
D_z = D_z + \mbox{tool-offset}
\end{math}

The required HAL connection (for xyzac-trt) is:

----
net :tool-offset motion.tooloffset.z xyzac-trt-kins.tool-offset
----

where:

----
:tool-offset ---------------- signal name
motion.tooloffset.z --------- output HAL pin from LinuxCNC motion module
xyzac-trt-kins.tool-offset -- input  HAL pin to xyzac-trt-kins
----

== Custom Kinematics Components

LinuxCNC implements kinematics using a HAL component that is loaded 
at startup of LinuxCNC.  The most common kinematics module, 'trivkins',
implements identity (trivial) kinematics where there is a one-to-one
correspondence between an axis coordinate letter and a motor joint.
Addtional kinematics modules for more complex systems (including 'xyzac-trt'
and 'xyzbc-trt' described above) are available.

See the kins manpage ($ man kins) for brief descriptions of the available
kinematics modules.

The kinematics modules provided by LinuxCNC are typically written in the
C-language.  Since a standard structure is used, creation of a custom
kinematics module is facilitated by copying an existing source file to a user
file with a new name, modifying it, and then installing.

Installation is done using halcompile:

----
sudo halcompile --install kinsname.c
----

where "kinsname" is the name you give to your component. The sudo prefix is
required to install it and you will be asked for your root password.  See the
halcompile man page for more information ($ man halcompile)

Once it is compiled and installed you can reference it in your config setup of
your machine. This is done in the ini file of your config directory. For
example, the common ini specificaion:

----
[KINS]
KINEMATICS = trivkins
----

is replaced by

----
[KINS]
KINEMATICS = kinsname
----

where "kinsname" is the name of your kins program.  Additional HAL pins may
be created by the module for variable configuration items such as
the $D_x, D_y, D_z, tool-offset$ used in the xyzac-trt kinematics
module.   These pins can be connected to a signal for dynamic control
or set once with HAL connections like:

----
# set offset parameters
net :tool-offset motion.tooloffset.z xyzac-trt-kins.tool-offset
setp xyzac-trt-kins.y-offset 0
setp xyzac-trt-kins.z-offset 20
----

== References
[latex]
\begin{description}
\item [[1]] A Postprocessor Based on the Kinematics Model for General Five-Axis machine Tools: C-H She, R-S Lee, J Manufacturing Processes, V2 N2, 2000.
\item [[2]] NC Post-processor for 5-axis milling of table-rotating/tilting type: YH Jung, DW Lee, JS Kim, HS Mok, J Materials Processing Technology,130-131 (2002) 641-646.
\item [[3]] 3D 6-DOF Serial Arm Robot Kinematics, RJ du Preez, SA-CNC-CLUB, Dec. 5, 2013.
\item [[4]] Design of a generic five-axis postprocessor based on generalized kinematics model of machine tool: C-H She, C-C Chang, Int. J Machine Tools \& Manufacture, 47 (2007) 537-545.
\end{description}

== Figures

.Table tilting/rotating and Spindle/table tilting configuration
image::5-axis-figures/Figure-9.png[align= "center"]

.Spindle tilting/tilting configuration
image::5-axis-figures/Figure-10.png[align= "center",height=400]

.Spindle/table tilting/rotary configuration
image::5-axis-figures/Figure-11.png[align= "center",height=400]


